// This file is part of Eigen, a lightweight C++ template library
// for linear algebra.
//
// Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
// Copyright (C) 2007-2011 Benoit Jacob <jacob.benoit.1@gmail.com>
//
// This Source Code Form is subject to the terms of the Mozilla
// Public License v. 2.0. If a copy of the MPL was not distributed
// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

#ifndef EIGEN_CORE_MODULE_H
#define EIGEN_CORE_MODULE_H

// first thing Eigen does: stop the compiler from reporting useless warnings.
#include "src/Core/util/DisableStupidWarnings.hpp"

// then include this file where all our macros are defined. It's really important to do it first because
// it's where we do all the compiler/OS/arch detections and define most defaults.
#include "src/Core/util/Macros.hpp"

// This detects SSE/AVX/NEON/etc. and configure alignment settings
#include "src/Core/util/ConfigureVectorization.hpp"

// We need cuda_runtime.h/hip_runtime.h to ensure that
// the EIGEN_USING_STD macro works properly on the device side
#if defined(EIGEN_CUDACC)
  #include <cuda_runtime.h>
#elif defined(EIGEN_HIPCC)
  #include <hip/hip_runtime.h>
#endif


#ifdef EIGEN_EXCEPTIONS
  #include <new>
#endif

// Disable the ipa-cp-clone optimization flag with MinGW 6.x or newer (enabled by default with -O3)
// See http://eigen.tuxfamily.org/bz/show_bug.cgi?id=556 for details.
#if EIGEN_COMP_MINGW && EIGEN_GNUC_AT_MOST(5,5)
  #pragma GCC optimize ("-fno-ipa-cp-clone")
#endif

// Prevent ICC from specializing std::complex operators that silently fail
// on device. This allows us to use our own device-compatible specializations
// instead.
#if defined(EIGEN_COMP_ICC) && defined(EIGEN_GPU_COMPILE_PHASE) \
    && !defined(_OVERRIDE_COMPLEX_SPECIALIZATION_)
#define _OVERRIDE_COMPLEX_SPECIALIZATION_ 1
#endif
#include <complex>

// this include file manages BLAS and MKL related macros
// and inclusion of their respective header files
#include "src/Core/util/MKL_support.hpp"


#if defined(EIGEN_HAS_CUDA_FP16) || defined(EIGEN_HAS_HIP_FP16)
  #define EIGEN_HAS_GPU_FP16
#endif

#if defined(EIGEN_HAS_CUDA_BF16) || defined(EIGEN_HAS_HIP_BF16)
  #define EIGEN_HAS_GPU_BF16
#endif

#if (defined _OPENMP) && (!defined EIGEN_DONT_PARALLELIZE)
  #define EIGEN_HAS_OPENMP
#endif

#ifdef EIGEN_HAS_OPENMP
#include <atomic>
#include <omp.h>
#endif

// MSVC for windows mobile does not have the errno.h file
#if !(EIGEN_COMP_MSVC && EIGEN_OS_WINCE) && !EIGEN_COMP_ARM
#define EIGEN_HAS_ERRNO
#endif

#ifdef EIGEN_HAS_ERRNO
#include <cerrno>
#endif
#include <cstddef>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <functional>
#ifndef EIGEN_NO_IO
  #include <sstream>
  #include <iosfwd>
#endif
#include <cstring>
#include <string>
#include <limits>
#include <climits> // for CHAR_BIT
// for min/max:
#include <algorithm>

#include <array>

// for std::is_nothrow_move_assignable
#include <type_traits>

// for outputting debug info
#ifdef EIGEN_DEBUG_ASSIGN
#include <iostream>
#endif

// required for __cpuid, needs to be included after cmath
// also required for _BitScanReverse on Windows on ARM
#if EIGEN_COMP_MSVC && (EIGEN_ARCH_i386_OR_x86_64 || EIGEN_ARCH_ARM64) && !EIGEN_OS_WINCE
  #include <intrin.h>
#endif

#if defined(EIGEN_USE_SYCL)
  #undef min
  #undef max
  #undef isnan
  #undef isinf
  #undef isfinite
  #include <CL/sycl.hpp>
  #include <map>
  #include <memory>
  #include <utility>
  #include <thread>
  #ifndef EIGEN_SYCL_LOCAL_THREAD_DIM0
  #define EIGEN_SYCL_LOCAL_THREAD_DIM0 16
  #endif
  #ifndef EIGEN_SYCL_LOCAL_THREAD_DIM1
  #define EIGEN_SYCL_LOCAL_THREAD_DIM1 16
  #endif
#endif


#if defined EIGEN2_SUPPORT_STAGE40_FULL_EIGEN3_STRICTNESS || defined EIGEN2_SUPPORT_STAGE30_FULL_EIGEN3_API || defined EIGEN2_SUPPORT_STAGE20_RESOLVE_API_CONFLICTS || defined EIGEN2_SUPPORT_STAGE10_FULL_EIGEN2_API || defined EIGEN2_SUPPORT
// This will generate an error message:
#error Eigen2-support is only available up to version 3.2. Please go to "http://eigen.tuxfamily.org/index.php?title=Eigen2" for further information
#endif

namespace Eigen {

// we use size_t frequently and we'll never remember to prepend it with std:: every time just to
// ensure QNX/QCC support
using std::size_t;
// gcc 4.6.0 wants std:: for ptrdiff_t
using std::ptrdiff_t;

}

/** \defgroup Core_Module Core module
  * This is the main module of Eigen providing dense matrix and vector support
  * (both fixed and dynamic size) with all the features corresponding to a BLAS library
  * and much more...
  *
  * \code
  * #include <Eigen/Core>
  * \endcode
  */

#include "src/Core/util/Constants.hpp"
#include "src/Core/util/Meta.hpp"
#include "src/Core/util/ForwardDeclarations.hpp"
#include "src/Core/util/StaticAssert.hpp"
#include "src/Core/util/XprHelper.hpp"
#include "src/Core/util/Memory.hpp"
#include "src/Core/util/IntegralConstant.hpp"
#include "src/Core/util/Serializer.hpp"
#include "src/Core/util/SymbolicIndex.hpp"

#include "src/Core/NumTraits.hpp"
#include "src/Core/MathFunctions.hpp"
#include "src/Core/GenericPacketMath.hpp"
#include "src/Core/MathFunctionsImpl.hpp"
#include "src/Core/arch/Default/ConjHelper.hpp"
// Generic half float support
#include "src/Core/arch/Default/Half.hpp"
#include "src/Core/arch/Default/BFloat16.hpp"
#include "src/Core/arch/Default/TypeCasting.hpp"
#include "src/Core/arch/Default/GenericPacketMathFunctionsFwd.hpp"

#if defined EIGEN_VECTORIZE_AVX512
  #if defined EIGEN_VECTORIZE_AVX512FP16
    #include "src/Core/arch/AVX512/PacketMathFP16.hpp"
  #endif
  #include "src/Core/arch/SSE/PacketMath.hpp"
  #include "src/Core/arch/SSE/TypeCasting.hpp"
  #include "src/Core/arch/SSE/Complex.hpp"
  #include "src/Core/arch/AVX/PacketMath.hpp"
  #include "src/Core/arch/AVX/TypeCasting.hpp"
  #include "src/Core/arch/AVX/Complex.hpp"
  #include "src/Core/arch/AVX512/PacketMath.hpp"
  #include "src/Core/arch/AVX512/TypeCasting.hpp"
  #include "src/Core/arch/AVX512/Complex.hpp"
  #include "src/Core/arch/SSE/MathFunctions.hpp"
  #include "src/Core/arch/AVX/MathFunctions.hpp"
  #include "src/Core/arch/AVX512/MathFunctions.hpp"
  #include "src/Core/arch/AVX512/TrsmKernel.hpp"
#elif defined EIGEN_VECTORIZE_AVX
  // Use AVX for floats and doubles, SSE for integers
  #include "src/Core/arch/SSE/PacketMath.hpp"
  #include "src/Core/arch/SSE/TypeCasting.hpp"
  #include "src/Core/arch/SSE/Complex.hpp"
  #include "src/Core/arch/AVX/PacketMath.hpp"
  #include "src/Core/arch/AVX/TypeCasting.hpp"
  #include "src/Core/arch/AVX/Complex.hpp"
  #include "src/Core/arch/SSE/MathFunctions.hpp"
  #include "src/Core/arch/AVX/MathFunctions.hpp"
#elif defined EIGEN_VECTORIZE_SSE
  #include "src/Core/arch/SSE/PacketMath.hpp"
  #include "src/Core/arch/SSE/TypeCasting.hpp"
  #include "src/Core/arch/SSE/MathFunctions.hpp"
  #include "src/Core/arch/SSE/Complex.hpp"
#elif defined(EIGEN_VECTORIZE_ALTIVEC) || defined(EIGEN_VECTORIZE_VSX)
  #include "src/Core/arch/AltiVec/PacketMath.hpp"
  #include "src/Core/arch/AltiVec/MathFunctions.hpp"
  #include "src/Core/arch/AltiVec/Complex.hpp"
#elif defined EIGEN_VECTORIZE_NEON
  #include "src/Core/arch/NEON/PacketMath.hpp"
  #include "src/Core/arch/NEON/TypeCasting.hpp"
  #include "src/Core/arch/NEON/MathFunctions.hpp"
  #include "src/Core/arch/NEON/Complex.hpp"
#elif defined EIGEN_VECTORIZE_SVE
  #include "src/Core/arch/SVE/PacketMath.hpp"
  #include "src/Core/arch/SVE/TypeCasting.hpp"
  #include "src/Core/arch/SVE/MathFunctions.hpp"
#elif defined EIGEN_VECTORIZE_ZVECTOR
  #include "src/Core/arch/ZVector/PacketMath.hpp"
  #include "src/Core/arch/ZVector/MathFunctions.hpp"
  #include "src/Core/arch/ZVector/Complex.hpp"
#elif defined EIGEN_VECTORIZE_MSA
  #include "src/Core/arch/MSA/PacketMath.hpp"
  #include "src/Core/arch/MSA/MathFunctions.hpp"
  #include "src/Core/arch/MSA/Complex.hpp"
#endif

#if defined EIGEN_VECTORIZE_GPU
  #include "src/Core/arch/GPU/PacketMath.hpp"
  #include "src/Core/arch/GPU/MathFunctions.hpp"
  #include "src/Core/arch/GPU/TypeCasting.hpp"
#endif

#if defined(EIGEN_USE_SYCL)
  #include "src/Core/arch/SYCL/SyclMemoryModel.hpp"
  #include "src/Core/arch/SYCL/InteropHeaders.hpp"
#if !defined(EIGEN_DONT_VECTORIZE_SYCL)
  #include "src/Core/arch/SYCL/PacketMath.hpp"
  #include "src/Core/arch/SYCL/MathFunctions.hpp"
  #include "src/Core/arch/SYCL/TypeCasting.hpp"
#endif
#endif

#include "src/Core/arch/Default/Settings.hpp"
// This file provides generic implementations valid for scalar as well
#include "src/Core/arch/Default/GenericPacketMathFunctions.hpp"

#include "src/Core/functors/TernaryFunctors.hpp"
#include "src/Core/functors/BinaryFunctors.hpp"
#include "src/Core/functors/UnaryFunctors.hpp"
#include "src/Core/functors/NullaryFunctors.hpp"
#include "src/Core/functors/StlFunctors.hpp"
#include "src/Core/functors/AssignmentFunctors.hpp"

// Specialized functors for GPU.
#ifdef EIGEN_GPUCC
#include "src/Core/arch/GPU/Complex.hpp"
#endif

// Specializations of vectorized activation functions for NEON.
#ifdef EIGEN_VECTORIZE_NEON
#include "src/Core/arch/NEON/UnaryFunctors.hpp"
#endif

#include "src/Core/util/IndexedViewHelper.hpp"
#include "src/Core/util/ReshapedHelper.hpp"
#include "src/Core/ArithmeticSequence.hpp"
#ifndef EIGEN_NO_IO
  #include "src/Core/IO.hpp"
#endif
#include "src/Core/DenseCoeffsBase.hpp"
#include "src/Core/DenseBase.hpp"
#include "src/Core/MatrixBase.hpp"
#include "src/Core/EigenBase.hpp"

#include "src/Core/Product.hpp"
#include "src/Core/CoreEvaluators.hpp"
#include "src/Core/AssignEvaluator.hpp"

#ifndef EIGEN_PARSED_BY_DOXYGEN // work around Doxygen bug triggered by Assign.h r814874
                                // at least confirmed with Doxygen 1.5.5 and 1.5.6
  #include "src/Core/Assign.hpp"
#endif

#include "src/Core/ArrayBase.hpp"
#include "src/Core/util/BlasUtil.hpp"
#include "src/Core/DenseStorage.hpp"
#include "src/Core/NestByValue.hpp"

// #include "src/Core/ForceAlignedAccess.hpp"

#include "src/Core/ReturnByValue.hpp"
#include "src/Core/NoAlias.hpp"
#include "src/Core/PlainObjectBase.hpp"
#include "src/Core/Matrix.hpp"
#include "src/Core/Array.hpp"
#include "src/Core/CwiseTernaryOp.hpp"
#include "src/Core/CwiseBinaryOp.hpp"
#include "src/Core/CwiseUnaryOp.hpp"
#include "src/Core/CwiseNullaryOp.hpp"
#include "src/Core/CwiseUnaryView.hpp"
#include "src/Core/SelfCwiseBinaryOp.hpp"
#include "src/Core/Dot.hpp"
#include "src/Core/StableNorm.hpp"
#include "src/Core/Stride.hpp"
#include "src/Core/MapBase.hpp"
#include "src/Core/Map.hpp"
#include "src/Core/Ref.hpp"
#include "src/Core/Block.hpp"
#include "src/Core/VectorBlock.hpp"
#include "src/Core/IndexedView.hpp"
#include "src/Core/Reshaped.hpp"
#include "src/Core/Transpose.hpp"
#include "src/Core/DiagonalMatrix.hpp"
#include "src/Core/Diagonal.hpp"
#include "src/Core/DiagonalProduct.hpp"
#include "src/Core/SkewSymmetricMatrix3.hpp"
#include "src/Core/Redux.hpp"
#include "src/Core/Visitor.hpp"
#include "src/Core/Fuzzy.hpp"
#include "src/Core/Swap.hpp"
#include "src/Core/CommaInitializer.hpp"
#include "src/Core/GeneralProduct.hpp"
#include "src/Core/Solve.hpp"
#include "src/Core/Inverse.hpp"
#include "src/Core/SolverBase.hpp"
#include "src/Core/PermutationMatrix.hpp"
#include "src/Core/Transpositions.hpp"
#include "src/Core/TriangularMatrix.hpp"
#include "src/Core/SelfAdjointView.hpp"
#include "src/Core/products/GeneralBlockPanelKernel.hpp"
#include "src/Core/products/Parallelizer.hpp"
#include "src/Core/ProductEvaluators.hpp"
#include "src/Core/products/GeneralMatrixVector.hpp"
#include "src/Core/products/GeneralMatrixMatrix.hpp"
#include "src/Core/SolveTriangular.hpp"
#include "src/Core/products/GeneralMatrixMatrixTriangular.hpp"
#include "src/Core/products/SelfadjointMatrixVector.hpp"
#include "src/Core/products/SelfadjointMatrixMatrix.hpp"
#include "src/Core/products/SelfadjointProduct.hpp"
#include "src/Core/products/SelfadjointRank2Update.hpp"
#include "src/Core/products/TriangularMatrixVector.hpp"
#include "src/Core/products/TriangularMatrixMatrix.hpp"
#include "src/Core/products/TriangularSolverMatrix.hpp"
#include "src/Core/products/TriangularSolverVector.hpp"
#include "src/Core/BandMatrix.hpp"
#include "src/Core/CoreIterators.hpp"
#include "src/Core/ConditionEstimator.hpp"

#if defined(EIGEN_VECTORIZE_VSX)
  #include "src/Core/arch/AltiVec/MatrixProduct.hpp"
#elif defined EIGEN_VECTORIZE_NEON
  #include "src/Core/arch/NEON/GeneralBlockPanelKernel.hpp"
#endif

#if defined(EIGEN_VECTORIZE_AVX512)
  #include "src/Core/arch/AVX512/GemmKernel.hpp"
#endif

#include "src/Core/BooleanRedux.hpp"
#include "src/Core/Select.hpp"
#include "src/Core/VectorwiseOp.hpp"
#include "src/Core/PartialReduxEvaluator.hpp"
#include "src/Core/Random.hpp"
#include "src/Core/Replicate.hpp"
#include "src/Core/Reverse.hpp"
#include "src/Core/ArrayWrapper.hpp"
#include "src/Core/StlIterators.hpp"

#ifdef EIGEN_USE_BLAS
#include "src/Core/products/GeneralMatrixMatrix_BLAS.hpp"
#include "src/Core/products/GeneralMatrixVector_BLAS.hpp"
#include "src/Core/products/GeneralMatrixMatrixTriangular_BLAS.hpp"
#include "src/Core/products/SelfadjointMatrixMatrix_BLAS.hpp"
#include "src/Core/products/SelfadjointMatrixVector_BLAS.hpp"
#include "src/Core/products/TriangularMatrixMatrix_BLAS.hpp"
#include "src/Core/products/TriangularMatrixVector_BLAS.hpp"
#include "src/Core/products/TriangularSolverMatrix_BLAS.hpp"
#endif // EIGEN_USE_BLAS

#ifdef EIGEN_USE_MKL_VML
#include "src/Core/Assign_MKL.hpp"
#endif

#include "src/Core/GlobalFunctions.hpp"

#include "src/Core/util/ReenableStupidWarnings.hpp"

#endif // EIGEN_CORE_MODULE_H
